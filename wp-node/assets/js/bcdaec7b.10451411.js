"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[876],{3463:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"concepts-features/user-role-capabilities","title":"User, Role and Capabilities","description":"WP-Node adopts the same principles of Roles and Capabilities as described in the official WordPress documentation.","source":"@site/docs/concepts-features/user-role-capabilities.md","sourceDirName":"concepts-features","slug":"/concepts-features/user-role-capabilities","permalink":"/wp-node/docs/concepts-features/user-role-capabilities","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hooks (Filter and Action)","permalink":"/wp-node/docs/concepts-features/hooks"},"next":{"title":"Query Builder Components","permalink":"/wp-node/docs/concepts-features/query-util"}}');var r=t(4848),i=t(8453);const o={},a="User, Role and Capabilities",c={},l=[{value:"Current Component",id:"current-component",level:2},{value:"Assigning a User to Context",id:"assigning-a-user-to-context",level:4},{value:"Retrieving Roles",id:"retrieving-roles",level:3},{value:"Checking Capabilities",id:"checking-capabilities",level:3},{value:"Authentication and Authorization",id:"authentication-and-authorization",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"user-role-and-capabilities",children:"User, Role and Capabilities"})}),"\n",(0,r.jsxs)(n.p,{children:["WP-Node adopts the same principles of Roles and Capabilities as described in the official ",(0,r.jsx)(n.a,{href:"https://wordpress.org/documentation/article/roles-and-capabilities/",children:"WordPress documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When a ",(0,r.jsx)(n.code,{children:"Context"})," is initialized in WP-Node, it defaults to an ",(0,r.jsx)(n.strong,{children:"anonymous user"})," \u2014 a user with no ID, role, or capabilities. To perform user-specific operations, you can assign a valid WordPress user to the current context using the ",(0,r.jsx)(n.strong,{children:"Current"})," component."]}),"\n",(0,r.jsx)(n.h2,{id:"current-component",children:"Current Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Current"})," component represents the currently active user and their associated roles. It provides utility methods to retrieve user data, check roles, and validate capabilities."]}),"\n",(0,r.jsx)(n.h4,{id:"assigning-a-user-to-context",children:"Assigning a User to Context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const context = await Application.getContext();\n\n// Assign a user to the current context using user ID\n// Alternatively, pass a username (e.g., "wp")\nawait context.current.assumeUser(1);\n\nconst user = context.current.user;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"retrieving-roles",children:"Retrieving Roles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Retrieve the primary role of the user\nconst role = await context.current.user?.role();\n\n// WordPress allows users to have multiple roles.\n// Use 'roles' to get all assigned roles.\nconst roles = await context.current.user?.roles();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"checking-capabilities",children:"Checking Capabilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// Check if the user has permission to edit any posts\nconst canEditPosts = await user?.can("edit_posts");\n\n// Check if the user can edit a specific post (e.g., post ID 1)\nconst canEditPost = await user?.can("edit_post", 1);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication-and-authorization",children:"Authentication and Authorization"}),"\n",(0,r.jsxs)(n.p,{children:["WP-Node includes a utility method ",(0,r.jsx)(n.code,{children:"checkPassword"})," to verify a user's password hash. Combined with the Current component, this enables basic ",(0,r.jsx)(n.strong,{children:"authentication"})," and ",(0,r.jsx)(n.strong,{children:"authorization"})," logic in your app."]}),"\n",(0,r.jsx)(n.p,{children:"Here's the example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import Application from "@rnaga/wp-node/Application";\nimport { checkPassword } from "@rnaga/wp-node/common";\n\n// Initialize context\nconst wp = await Application.getContext();\n\n// Fetch user record from the database\nconst user = await wp.utils.user.get("user123");\n\n// Attempt authentication\nif (\n  !user.props?.ID ||\n  !user.props.user_pass ||\n  // Validate password\n  !checkPassword("password123", user.props.user_pass)\n) {\n  throw new Error("Unknown user");\n}\n\n// Assign authenticated user to context\nawait wp.current.assumeUser(user.props.ID);\n\n// Verify permission to edit posts\nif (!(await wp.current.user!.can("edit_posts"))) {\n  throw new Error("User does not have permission to edit posts");\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);