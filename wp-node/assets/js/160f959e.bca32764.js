"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[328],{4172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts-features/di","title":"Dependency Injection","description":"WP-Node makes extensive use of dependency injection through TypeScript decorators.","source":"@site/docs/concepts-features/di.md","sourceDirName":"concepts-features","slug":"/concepts-features/di","permalink":"/wp-node/docs/concepts-features/di","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/wp-node/docs/getting-started/configuration"},"next":{"title":"\ud83d\udd17 Relationship Between Components","permalink":"/wp-node/docs/concepts-features/diagram"}}');var o=t(4848),i=t(8453);const c={},a="Dependency Injection",r={},d=[{value:"What is <code>@component</code>?",id:"what-is-component",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Supported Scopes",id:"supported-scopes",level:3},{value:"Using <code>Components</code> to dynamically instantiate Component",id:"using-components-to-dynamically-instantiate-component",level:3},{value:"<code>get()</code> method",id:"get-method",level:4},{value:"Example usage",id:"example-usage-1",level:4}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"})}),"\n",(0,o.jsxs)(n.p,{children:["WP-Node makes extensive use of dependency injection through TypeScript decorators.",(0,o.jsx)(n.br,{}),"\n","It features a custom ",(0,o.jsx)(n.code,{children:"@component"})," decorator that enables automatic injection of dependencies into classes. This mechanism streamlines the resolution of services (e.g. ",(0,o.jsx)(n.code,{children:"Logger"}),", ",(0,o.jsx)(n.code,{children:"Meta"}),", and ",(0,o.jsx)(n.code,{children:"QueryUtil"})," classes), while also supporting lifecycle scoping for managed components."]}),"\n",(0,o.jsxs)(n.h3,{id:"what-is-component",children:["What is ",(0,o.jsx)(n.code,{children:"@component"}),"?"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"@component"})," is a ",(0,o.jsx)(n.strong,{children:"custom decorator"})," provided by WP-Node Core. It marks a class as injectable and allows its dependencies to be automatically instantiated and passed into the constructor."]}),"\n",(0,o.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(n.p,{children:"The following example demonstrates usage of the @component decorator with Transient scope:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Mark this class as a component that can be resolved.\n// 'Transient' scope means a new instance will be created every time it is requested.\n@component({ scope: Scope.Transient })\nexport class Post {\n  constructor(\n    // These dependencies are automatically injected by the container\n    // as long as the class (e.g., Meta) is registered with the @component decorator.\n    public meta: Meta,\n    private logger: Logger,\n    private queryUtil: QueryUtil,\n    private postId: number\n  ) {\n    // Example of setting up meta component with the current post ID\n    this.meta.set(\"post\", postId);\n  }\n\n  async init() {\n    // queryUtil is already instantiated and injected \u2014 ready to use\n    const post = await this.queryUtil.posts((q) => q.get(this.postId));\n    if (!post) {\n      // logger is also already instantiated and injected- ready to use\n      this.logger.info(`Post not found: ${this.postId}`);\n    }\n    return post;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"supported-scopes",children:"Supported Scopes"}),"\n",(0,o.jsx)(n.p,{children:"The decorator accepts a scope option, which determines the lifecycle of the injected instance:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Scope"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Singleton"}),(0,o.jsx)(n.td,{children:"A single instance shared across the entire application runtime."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Context"}),(0,o.jsx)(n.td,{children:"A new instance created per logical context (e.g., per HTTP request)."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Transient"}),(0,o.jsx)(n.td,{children:"A new instance created each time the class is instantiated (no reuse)."})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"This design allows flexible control over object reuse and memory efficiency."}),"\n",(0,o.jsxs)(n.h3,{id:"using-components-to-dynamically-instantiate-component",children:["Using ",(0,o.jsx)(n.code,{children:"Components"})," to dynamically instantiate Component"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/rnaga/wp-node/blob/main/packages/core/src/core/components.ts",children:"Components"})," class plays a central role in WP-Node\u2019s dependency injection system.\nWhile many components are injected directly into constructors, you can also inject Components container itself \u2014 giving you the flexibility to instantiate other components dynamically when needed."]}),"\n",(0,o.jsx)(n.p,{children:"This is especially useful when:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You only need a component in specific methods (not in the constructor)."}),"\n",(0,o.jsx)(n.li,{children:"You want lazy instantiation (create the instance only when it\u2019s actually used)."}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"get-method",children:[(0,o.jsx)(n.code,{children:"get()"})," method"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Components.get"})," method allows you to manually instantiate any component that has been registered with @component decorator."]}),"\n",(0,o.jsx)(n.h4,{id:"example-usage-1",children:"Example usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'@component({ scope: Scope.Transient })\nexport class Example {\n  constructor(private components: Components) {}\n\n  async getPostById(id: number): Promise<types.Tables["posts"]> {\n    // Dynamically resolve and instantiate PostUtil component.\n    const postUtil = this.components.get(PostUtil);\n    const post = await postUtil.get(id);\n\n    return post.props;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"In this example:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"PostUtil component is not injected directly into the constructor."}),"\n",(0,o.jsx)(n.li,{children:"Instead, it is retrieved on-demand using components.get(PostUtil)."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This approach keeps your component lean and only loads what\u2019s necessary for the current operation."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);