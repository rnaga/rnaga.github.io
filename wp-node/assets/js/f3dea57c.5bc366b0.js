"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[491],{6284:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"reference/post-util","title":"PostUtil","description":"PostUtil is a helper utility for working with WordPress posts, including fetching, visibility checks, metadata access, and slug generation.","source":"@site/docs/reference/post-util.md","sourceDirName":"reference","slug":"/reference/post-util","permalink":"/wp-node/docs/reference/post-util","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Term","permalink":"/wp-node/docs/reference/term"},"next":{"title":"Meta","permalink":"/wp-node/docs/reference/meta"}}');var i=s(4848),l=s(8453);const a={},c="PostUtil",r={},o=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"toPost",id:"topost",level:4},{value:"toPosts",id:"toposts",level:4},{value:"get",id:"get",level:4},{value:"getBySlug",id:"getbyslug",level:4},{value:"isPubliclyViewable",id:"ispubliclyviewable",level:4},{value:"getViewableTypes",id:"getviewabletypes",level:4},{value:"isTypeViewable",id:"istypeviewable",level:3},{value:"isStatusViewable",id:"isstatusviewable",level:4},{value:"getStatusObject",id:"getstatusobject",level:4},{value:"getStatus",id:"getstatus",level:4},{value:"getAttachedFile",id:"getattachedfile",level:4},{value:"getAttachmentMetadata",id:"getattachmentmetadata",level:4},{value:"getTypeObject",id:"gettypeobject",level:4},{value:"getUniqueSlug",id:"getuniqueslug",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"postutil",children:"PostUtil"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/rnaga/wp-node/blob/main/packages/core/src/core/utils/post.util.ts",children:"PostUtil"})," is a helper utility for working with WordPress posts, including fetching, visibility checks, metadata access, and slug generation."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Converts raw DB records into ",(0,i.jsx)(t.code,{children:"Post"})," instances."]}),"\n",(0,i.jsx)(t.li,{children:"Resolves visibility of posts by status/type."}),"\n",(0,i.jsx)(t.li,{children:"Provides helpers to fetch attachments and metadata."}),"\n",(0,i.jsx)(t.li,{children:"Generates unique post slugs and retrieves post type/status objects."}),"\n",(0,i.jsxs)(t.li,{children:["Wraps logic from core WordPress behaviors (e.g. ",(0,i.jsx)(t.code,{children:"get_post_status"}),", ",(0,i.jsx)(t.code,{children:"get_attached_file"}),")."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const context = await Application.getContext();\nconst post = await context.utils.post.get(postId);\nconst postBySlug = await pcontext.utils.post.getBySlug("hello-world");\nconst isPublic = await context.utils.post.isPubliclyViewable(post);\n'})}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h4,{id:"topost",children:"toPost"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'toPost(post: types.Tables["posts"]): Post\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Converts a raw post object to a ",(0,i.jsx)(t.code,{children:"Post"})," instance."]}),"\n",(0,i.jsx)(t.h4,{id:"toposts",children:"toPosts"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'toPosts(posts: types.Tables["posts"][]): Post[\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Maps multiple raw post records into ",(0,i.jsx)(t.code,{children:"Post"})," instances."]}),"\n",(0,i.jsx)(t.h4,{id:"get",children:"get"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"get(id: number): Promise<Post>\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Fetches a ",(0,i.jsx)(t.code,{children:"Post"})," instance by ID."]}),"\n",(0,i.jsx)(t.h4,{id:"getbyslug",children:"getBySlug"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getBySlug(slug: string): Promise<Post | undefined>\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Finds a post by ",(0,i.jsx)(t.code,{children:"post_name"})," (slug) and returns a ",(0,i.jsx)(t.code,{children:"Post"})," instance."]}),"\n",(0,i.jsx)(t.h4,{id:"ispubliclyviewable",children:"isPubliclyViewable"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"isPubliclyViewable(postIdOrPost: number | Post): Promise<boolean>\n"})}),"\n",(0,i.jsx)(t.p,{children:"Determines if a post is visible to the public."}),"\n",(0,i.jsx)(t.h4,{id:"getviewabletypes",children:"getViewableTypes"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getViewableTypes(): types.PostType[]\n"})}),"\n",(0,i.jsx)(t.p,{children:"Returns a list of publicly viewable post types based on config."}),"\n",(0,i.jsx)(t.h3,{id:"istypeviewable",children:"isTypeViewable"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"isTypeViewable(type: string | PostTypeObject): boolean\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"true"})," if a post type is public and queryable."]}),"\n",(0,i.jsx)(t.h4,{id:"isstatusviewable",children:"isStatusViewable"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"isStatusViewable(status: string | PostStatusObject): boolean\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"true"})," if a post status is publicly visible."]}),"\n",(0,i.jsx)(t.h4,{id:"getstatusobject",children:"getStatusObject"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getStatusObject(status: string): PostStatusObject | undefined\n"})}),"\n",(0,i.jsx)(t.p,{children:"Returns a status config object for a given status name."}),"\n",(0,i.jsx)(t.h4,{id:"getstatus",children:"getStatus"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getStatus(post?: Post, parent?: Post): Promise<string | undefined>\n"})}),"\n",(0,i.jsx)(t.p,{children:"Resolves the true status of a post, especially for attachments."}),"\n",(0,i.jsx)(t.h4,{id:"getattachedfile",children:"getAttachedFile"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getAttachedFile(postId: number, unfiltered?: boolean): Promise<string | undefined>\n"})}),"\n",(0,i.jsx)(t.p,{children:"Returns the full file path for a post attachment."}),"\n",(0,i.jsx)(t.h4,{id:"getattachmentmetadata",children:"getAttachmentMetadata"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getAttachmentMetadata<T = Record<string, any>>(postId: number): Promise<T | undefined>\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Fetches and parses ",(0,i.jsx)(t.code,{children:"_wp_attachment_metadata"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"gettypeobject",children:"getTypeObject"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getTypeObject(name: string): PostTypeObject | undefined\n"})}),"\n",(0,i.jsx)(t.p,{children:"Returns a post type configuration from the global config."}),"\n",(0,i.jsx)(t.h4,{id:"getuniqueslug",children:"getUniqueSlug"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"getUniqueSlug(\n  slug: string,\n  post: number | Post,\n  maxSuffix?: number\n): Promise<string>\n"})}),"\n",(0,i.jsx)(t.p,{children:"Generates a unique slug by checking for conflicts, appending suffixes if needed."}),"\n",(0,i.jsx)(t.hr,{})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var n=s(6540);const i={},l=n.createContext(i);function a(e){const t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);