"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[645],{3753:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"reference/term","title":"Term","description":"Term class represents a WordPress taxonomy term with associated taxonomy, metadata, and utility methods.","source":"@site/docs/reference/term.md","sourceDirName":"reference","slug":"/reference/term","permalink":"/wp-node/docs/reference/term","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Site","permalink":"/wp-node/docs/reference/site"},"next":{"title":"PostUtil","permalink":"/wp-node/docs/reference/post-util"}}');var r=t(4848),i=t(8453);const o={},a="Term",d={},l=[{value:"Description",id:"description",level:2},{value:"Properties",id:"properties",level:2},{value:"taxonomyName",id:"taxonomyname",level:4},{value:"taxonomy",id:"taxonomy",level:4},{value:"props",id:"props",level:4},{value:"Methods",id:"methods",level:2},{value:"children",id:"children",level:4},{value:"setTaxonomy",id:"settaxonomy",level:4},{value:"withProps",id:"withprops",level:4},{value:"Lifecycle",id:"lifecycle",level:2},{value:"init (decorated with <code>@asyncInit</code>)",id:"init-decorated-with-asyncinit",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"term",children:"Term"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/rnaga/wp-node/blob/main/packages/core/src/core/term.ts",children:"Term"})," class represents a WordPress taxonomy term with associated taxonomy, metadata, and utility methods."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loads and holds term data, taxonomy name, and taxonomy object."}),"\n",(0,r.jsxs)(n.li,{children:["Fetches child terms using ",(0,r.jsx)(n.code,{children:"QueryUtil"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Supports dynamic prop merging via ",(0,r.jsx)(n.code,{children:".withProps()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Automatically sets metadata context for ",(0,r.jsx)(n.code,{children:"term"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Initializes the term with optional props and taxonomy name. Also sets ",(0,r.jsx)(n.code,{children:"Meta"})," context with the ",(0,r.jsx)(n.code,{children:"termId"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h4,{id:"taxonomyname",children:"taxonomyName"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"taxonomyName: types.TaxonomyName | undefined;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the name of the taxonomy, if available."}),"\n",(0,r.jsx)(n.h4,{id:"taxonomy",children:"taxonomy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"taxonomy: Taxonomy | undefined;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the loaded ",(0,r.jsx)(n.code,{children:"Taxonomy"})," instance, if initialized."]}),"\n",(0,r.jsx)(n.h4,{id:"props",children:"props"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"props: Props | undefined;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Merged term, taxonomy, and relationship data from the WordPress database."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h4,{id:"children",children:"children"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"children(): Promise<types.validating.TermsResult | undefined>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Fetches child terms using the current term as the parent."}),"\n",(0,r.jsx)(n.h4,{id:"settaxonomy",children:"setTaxonomy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"setTaxonomy(taxonomy: Taxonomy): void\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sets the taxonomy object and updates the internal taxonomy name."}),"\n",(0,r.jsx)(n.h4,{id:"withprops",children:"withProps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"withProps(props: Partial<Props>): this\n"})}),"\n",(0,r.jsx)(n.p,{children:"Merges and overrides the existing props with the provided values."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,r.jsxs)(n.h4,{id:"init-decorated-with-asyncinit",children:["init (decorated with ",(0,r.jsx)(n.code,{children:"@asyncInit"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"private init(): Promise<void>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initializes term data and attempts to load the taxonomy if not already set."}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);