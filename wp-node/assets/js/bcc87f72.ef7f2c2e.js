"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[187],{5989:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"reference/user","title":"User","description":"User class represents a WordPress user in WP-Node. It is a transient component that resolves the user by ID, username, or email, and provides access to user roles and capabilities. It supports permission checks and anonymous fallback.","source":"@site/docs/reference/user.md","sourceDirName":"reference","slug":"/reference/user","permalink":"/wp-node/docs/reference/user","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Current","permalink":"/wp-node/docs/reference/current"},"next":{"title":"Post","permalink":"/wp-node/docs/reference/post"}}');var i=n(4848),o=n(8453);const t={},l="User",c={},a=[{value:"Description",id:"description",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>hasCapabilities(capabilities: string[], options?: { blogIds: number[] }): Promise&lt;boolean&gt;</code>",id:"hascapabilitiescapabilities-string-options--blogids-number--promiseboolean",level:5},{value:"<code>role(): Promise&lt;Role&gt;</code>",id:"role-promiserole",level:5},{value:"<code>roles(): Promise&lt;string[]&gt;</code>",id:"roles-promisestring",level:5},{value:"<code>can(action: string, ...args: any[]): Promise&lt;boolean&gt;</code>",id:"canaction-string-args-any-promiseboolean",level:5},{value:"<code>bulkCan(...)</code>",id:"bulkcan",level:5},{value:"<code>init(): Promise&lt;this | void&gt;</code>",id:"init-promisethis--void",level:5},{value:"Usage",id:"usage",level:2}];function d(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"user",children:"User"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://github.com/rnaga/wp-node/blob/main/packages/core/src/core/user.ts",children:(0,i.jsx)(s.code,{children:"User"})})," class represents a WordPress user in WP-Node. It is a transient component that resolves the user by ID, username, or email, and provides access to user roles and capabilities. It supports permission checks and anonymous fallback."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(s.p,{children:"This class is responsible for:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"User Resolution"}),": Resolves user from ID, username, or email using ",(0,i.jsx)(s.code,{children:"userRef"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Role Assignment"}),": Fetches roles from user meta (",(0,i.jsx)(s.code,{children:"_capabilities"}),") and adds ",(0,i.jsx)(s.code,{children:"superadmin"})," for multisite."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capability Checks"}),": Supports both single (",(0,i.jsx)(s.code,{children:"can"}),") and bulk (",(0,i.jsx)(s.code,{children:"bulkCan"}),") capability checks."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Anonymous Handling"}),": Automatically assigns an anonymous identity when no user is found."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"meta: Meta"})}),(0,i.jsx)(s.br,{}),"\n","Handles user-specific metadata operations."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:'props: types.Tables["users"] | undefined'})}),(0,i.jsx)(s.br,{}),"\n","Contains the WordPress user object. Returns ",(0,i.jsx)(s.code,{children:"undefined"})," if the user is anonymous or invalid."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h5,{id:"hascapabilitiescapabilities-string-options--blogids-number--promiseboolean",children:(0,i.jsx)(s.code,{children:"hasCapabilities(capabilities: string[], options?: { blogIds: number[] }): Promise<boolean>"})}),"\n",(0,i.jsxs)(s.p,{children:["Checks if the user has any of the given capabilities.",(0,i.jsx)(s.br,{}),"\n","Uses ",(0,i.jsx)(s.code,{children:"UserUtil"})," internally."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h5,{id:"role-promiserole",children:(0,i.jsx)(s.code,{children:"role(): Promise<Role>"})}),"\n",(0,i.jsx)(s.p,{children:"Returns the user's primary role after resolving roles."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h5,{id:"roles-promisestring",children:(0,i.jsx)(s.code,{children:"roles(): Promise<string[]>"})}),"\n",(0,i.jsx)(s.p,{children:"Resolves all roles assigned to the user:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Reads from user meta key ",(0,i.jsx)(s.code,{children:"_capabilities"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Adds ",(0,i.jsx)(s.code,{children:"superadmin"})," if found in ",(0,i.jsx)(s.code,{children:"site_admins"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Merges capabilities into a single ",(0,i.jsx)(s.code,{children:"Role"})," instance."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h5,{id:"canaction-string-args-any-promiseboolean",children:(0,i.jsx)(s.code,{children:"can(action: string, ...args: any[]): Promise<boolean>"})}),"\n",(0,i.jsxs)(s.p,{children:["Checks if the user can perform a given action.",(0,i.jsx)(s.br,{}),"\n","Returns ",(0,i.jsx)(s.code,{children:"true"})," or ",(0,i.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h5,{id:"bulkcan",children:(0,i.jsx)(s.code,{children:"bulkCan(...)"})}),"\n",(0,i.jsxs)(s.p,{children:["Runs multiple capability checks in batch.",(0,i.jsx)(s.br,{}),"\n","Accepts:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"A single action and list of arguments."}),"\n",(0,i.jsxs)(s.li,{children:["An array of ",(0,i.jsx)(s.code,{children:"[action, ...args]"})," tuples."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Returns an array of ",(0,i.jsx)(s.code,{children:"[action, args, result]"})," values."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h5,{id:"init-promisethis--void",children:(0,i.jsx)(s.code,{children:"init(): Promise<this | void>"})}),"\n",(0,i.jsxs)(s.p,{children:["Resolves the user using ",(0,i.jsx)(s.code,{children:"userRef"})," and populates ",(0,i.jsx)(s.code,{children:"props"})," and ",(0,i.jsx)(s.code,{children:"meta"}),".",(0,i.jsx)(s.br,{}),"\n","Automatically triggered via ",(0,i.jsx)(s.code,{children:"@asyncInit"}),"."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'const context = await Application.getContext();\nawait context.current.assumeUser(1);\n\nconst user = context.current.user!;\n\nawait user.can("edit_post", postId);\n\nconst results = await user.bulkCan([\n  ["edit_post", postId],\n  ["edit_comment", commentId],\n  ["edit_posts"],\n]);\n'})})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);