"use strict";(self.webpackChunkwp_node=self.webpackChunkwp_node||[]).push([[744],{5844:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference/current","title":"Current","description":"Current class manages the state of the \\"current\\" user, role, post, and site context at runtime. It is an internal utility wired into the Context to provide request-scoped information for WordPress-like environments.","source":"@site/docs/reference/current.md","sourceDirName":"reference","slug":"/reference/current","permalink":"/wp-node/docs/reference/current","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Context","permalink":"/wp-node/docs/reference/context"},"next":{"title":"User","permalink":"/wp-node/docs/reference/user"}}');var t=r(4848),i=r(8453);const o={},c="Current",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"<code>assumeUser(userRefOrUser?: number | string | User)</code>",id:"assumeuseruserreforuser-number--string--user",level:5},{value:"<code>setPost(id: number)</code>",id:"setpostid-number",level:5},{value:"<code>setUserRoles()</code>",id:"setuserroles",level:5},{value:"<code>setDefaultUserRoles()</code>",id:"setdefaultuserroles",level:5},{value:"<code>setTimezone()</code>",id:"settimezone",level:5},{value:"<code>switchSite(siteId, blogId?)</code>",id:"switchsitesiteid-blogid",level:5},{value:"<code>switchBlog(blogRef: number | string)</code>",id:"switchblogblogref-number--string",level:5},{value:"<code>restorePrevious()</code>",id:"restoreprevious",level:5}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"current",children:"Current"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/rnaga/wp-node/blob/main/packages/core/src/core/current.ts",children:(0,t.jsx)(s.code,{children:"Current"})}),' class manages the state of the "current" user, role, post, and site context at runtime. It is an internal utility wired into the ',(0,t.jsx)(s.code,{children:"Context"})," to provide request-scoped information for WordPress-like environments."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Tracks the currently active ",(0,t.jsx)(s.strong,{children:"user"}),", ",(0,t.jsx)(s.strong,{children:"role"}),", ",(0,t.jsx)(s.strong,{children:"post"}),", and ",(0,t.jsx)(s.strong,{children:"site/blog"})," in single-site or multisite mode."]}),"\n",(0,t.jsx)(s.li,{children:"Supports switching blogs and sites dynamically."}),"\n",(0,t.jsx)(s.li,{children:"Automatically handles time zone configuration."}),"\n",(0,t.jsx)(s.li,{children:"Maintains a stack of previous context states for rollback (e.g. after impersonation or switching site/blog)."}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.p,{children:"Assume a user by ID or username:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"await context.current.assumeUser(1);\n"})}),"\n",(0,t.jsx)(s.p,{children:"Switch multisite context:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"await context.current.switchSite(2, 5); // siteId = 2, blogId = 5\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"user"}),": The current ",(0,t.jsx)(s.code,{children:"User"})," object (or undefined)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"role"}),": The current ",(0,t.jsx)(s.code,{children:"Role"})," assigned to the user."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"post"}),": The current ",(0,t.jsx)(s.code,{children:"Post"})," in context."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"site"}),": The active ",(0,t.jsx)(s.code,{children:"Site"})," (only in multisite mode)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"blogId"}),": Returns current blog ID (",(0,t.jsx)(s.code,{children:"0"})," if single-site)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"siteId"}),": Returns current site ID (",(0,t.jsx)(s.code,{children:"0"})," if single-site)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"tables"}),": The current active ",(0,t.jsx)(s.code,{children:"Tables"})," instance (multisite-aware)."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,t.jsx)(s.h5,{id:"assumeuseruserreforuser-number--string--user",children:(0,t.jsx)(s.code,{children:"assumeUser(userRefOrUser?: number | string | User)"})}),"\n",(0,t.jsxs)(s.p,{children:["Sets the current user and role. Accepts a user ID, username, or ",(0,t.jsx)(s.code,{children:"User"})," object."]}),"\n",(0,t.jsx)(s.h5,{id:"setpostid-number",children:(0,t.jsx)(s.code,{children:"setPost(id: number)"})}),"\n",(0,t.jsxs)(s.p,{children:["Sets the current ",(0,t.jsx)(s.code,{children:"Post"})," instance based on the post ID."]}),"\n",(0,t.jsx)(s.h5,{id:"setuserroles",children:(0,t.jsx)(s.code,{children:"setUserRoles()"})}),"\n",(0,t.jsxs)(s.p,{children:["Loads blog-specific user roles and stores them in global ",(0,t.jsx)(s.code,{children:"vars"}),"."]}),"\n",(0,t.jsx)(s.h5,{id:"setdefaultuserroles",children:(0,t.jsx)(s.code,{children:"setDefaultUserRoles()"})}),"\n",(0,t.jsx)(s.p,{children:"Sets a fallback list of user roles using default roles."}),"\n",(0,t.jsx)(s.h5,{id:"settimezone",children:(0,t.jsx)(s.code,{children:"setTimezone()"})}),"\n",(0,t.jsxs)(s.p,{children:["Configures the application's time offset (",(0,t.jsx)(s.code,{children:"vars.TIME_OFFSET_MINUTES"}),") based on WordPress settings (",(0,t.jsx)(s.code,{children:"timezone_string"})," and ",(0,t.jsx)(s.code,{children:"gmt_offset"}),")."]}),"\n",(0,t.jsx)(s.h5,{id:"switchsitesiteid-blogid",children:(0,t.jsx)(s.code,{children:"switchSite(siteId, blogId?)"})}),"\n",(0,t.jsx)(s.p,{children:"Switches the active site and blog in multisite. If no blog ID is provided, it infers the main blog using site meta."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"await current.switchSite(2); // siteId = 2, auto-detects blogId\n"})}),"\n",(0,t.jsx)(s.h5,{id:"switchblogblogref-number--string",children:(0,t.jsx)(s.code,{children:"switchBlog(blogRef: number | string)"})}),"\n",(0,t.jsxs)(s.p,{children:["Switches to a new blog context and updates ",(0,t.jsx)(s.code,{children:"tables.index"})," for multisite-aware querying."]}),"\n",(0,t.jsx)(s.h5,{id:"restoreprevious",children:(0,t.jsx)(s.code,{children:"restorePrevious()"})}),"\n",(0,t.jsx)(s.p,{children:"Restores the previous context (user, site, blog) from the stack. Useful for undoing impersonation or temporary switching."})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>c});var n=r(6540);const t={},i=n.createContext(t);function o(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);